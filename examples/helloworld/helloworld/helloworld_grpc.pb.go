// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RotatorClient is the client API for Rotator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RotatorClient interface {
	// Добавить баннер
	AddBanner(ctx context.Context, in *SlotBanner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Удалить баннер
	RemoveBanner(ctx context.Context, in *BannerSlot, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Удалить баннер
	RemoveBanner1(ctx context.Context, in *SlotBanner, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// //Засчитать переход
	CountLinkClick(ctx context.Context, in *SlotBannerUser, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// //Выбрать баннер для показа
	SelectBanner(ctx context.Context, in *UserGroupBanner, opts ...grpc.CallOption) (*BannerId, error)
}

type rotatorClient struct {
	cc grpc.ClientConnInterface
}

func NewRotatorClient(cc grpc.ClientConnInterface) RotatorClient {
	return &rotatorClient{cc}
}

func (c *rotatorClient) AddBanner(ctx context.Context, in *SlotBanner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/helloworld.Rotator/AddBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) RemoveBanner(ctx context.Context, in *BannerSlot, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/helloworld.Rotator/RemoveBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) RemoveBanner1(ctx context.Context, in *SlotBanner, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/helloworld.Rotator/RemoveBanner1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) CountLinkClick(ctx context.Context, in *SlotBannerUser, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/helloworld.Rotator/CountLinkClick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) SelectBanner(ctx context.Context, in *UserGroupBanner, opts ...grpc.CallOption) (*BannerId, error) {
	out := new(BannerId)
	err := c.cc.Invoke(ctx, "/helloworld.Rotator/SelectBanner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RotatorServer is the server API for Rotator service.
// All implementations must embed UnimplementedRotatorServer
// for forward compatibility
type RotatorServer interface {
	// Добавить баннер
	AddBanner(context.Context, *SlotBanner) (*emptypb.Empty, error)
	// Удалить баннер
	RemoveBanner(context.Context, *BannerSlot) (*emptypb.Empty, error)
	// Удалить баннер
	RemoveBanner1(context.Context, *SlotBanner) (*emptypb.Empty, error)
	// //Засчитать переход
	CountLinkClick(context.Context, *SlotBannerUser) (*emptypb.Empty, error)
	// //Выбрать баннер для показа
	SelectBanner(context.Context, *UserGroupBanner) (*BannerId, error)
	mustEmbedUnimplementedRotatorServer()
}

// UnimplementedRotatorServer must be embedded to have forward compatible implementations.
type UnimplementedRotatorServer struct {
}

func (UnimplementedRotatorServer) AddBanner(context.Context, *SlotBanner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBanner not implemented")
}
func (UnimplementedRotatorServer) RemoveBanner(context.Context, *BannerSlot) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBanner not implemented")
}
func (UnimplementedRotatorServer) RemoveBanner1(context.Context, *SlotBanner) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBanner1 not implemented")
}
func (UnimplementedRotatorServer) CountLinkClick(context.Context, *SlotBannerUser) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLinkClick not implemented")
}
func (UnimplementedRotatorServer) SelectBanner(context.Context, *UserGroupBanner) (*BannerId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectBanner not implemented")
}
func (UnimplementedRotatorServer) mustEmbedUnimplementedRotatorServer() {}

// UnsafeRotatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RotatorServer will
// result in compilation errors.
type UnsafeRotatorServer interface {
	mustEmbedUnimplementedRotatorServer()
}

func RegisterRotatorServer(s grpc.ServiceRegistrar, srv RotatorServer) {
	s.RegisterService(&Rotator_ServiceDesc, srv)
}

func _Rotator_AddBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotBanner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotatorServer).AddBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Rotator/AddBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotatorServer).AddBanner(ctx, req.(*SlotBanner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotator_RemoveBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BannerSlot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotatorServer).RemoveBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Rotator/RemoveBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotatorServer).RemoveBanner(ctx, req.(*BannerSlot))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotator_RemoveBanner1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotBanner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotatorServer).RemoveBanner1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Rotator/RemoveBanner1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotatorServer).RemoveBanner1(ctx, req.(*SlotBanner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotator_CountLinkClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlotBannerUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotatorServer).CountLinkClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Rotator/CountLinkClick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotatorServer).CountLinkClick(ctx, req.(*SlotBannerUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rotator_SelectBanner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupBanner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RotatorServer).SelectBanner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/helloworld.Rotator/SelectBanner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RotatorServer).SelectBanner(ctx, req.(*UserGroupBanner))
	}
	return interceptor(ctx, in, info, handler)
}

// Rotator_ServiceDesc is the grpc.ServiceDesc for Rotator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rotator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.Rotator",
	HandlerType: (*RotatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBanner",
			Handler:    _Rotator_AddBanner_Handler,
		},
		{
			MethodName: "RemoveBanner",
			Handler:    _Rotator_RemoveBanner_Handler,
		},
		{
			MethodName: "RemoveBanner1",
			Handler:    _Rotator_RemoveBanner1_Handler,
		},
		{
			MethodName: "CountLinkClick",
			Handler:    _Rotator_CountLinkClick_Handler,
		},
		{
			MethodName: "SelectBanner",
			Handler:    _Rotator_SelectBanner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/helloworld.proto",
}
